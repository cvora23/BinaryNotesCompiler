
package ieee.poc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "Poc_SetError", isSet = false )
    public class Poc_SetError implements IASN1PreparedElement {
            
        @ASN1Element ( name = "errorStatus", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Poc_ErrorStatus errorStatus = null;
                
  
        @ASN1Element ( name = "modifyOperator", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private ModifyOperator modifyOperator = null;
                
  
        @ASN1Element ( name = "attributeId", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private OID_Type attributeId = null;
                
  
        
        public Poc_ErrorStatus getErrorStatus () {
            return this.errorStatus;
        }

        

        public void setErrorStatus (Poc_ErrorStatus value) {
            this.errorStatus = value;
        }
        
  
        
        public ModifyOperator getModifyOperator () {
            return this.modifyOperator;
        }

        

        public void setModifyOperator (ModifyOperator value) {
            this.modifyOperator = value;
        }
        
  
        
        public OID_Type getAttributeId () {
            return this.attributeId;
        }

        

        public void setAttributeId (OID_Type value) {
            this.attributeId = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Poc_SetError.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            