
package ieee.poc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "Poc_SaFilterEntry", isSet = false )
    public class Poc_SaFilterEntry implements IASN1PreparedElement {
            @ASN1Integer( name = "" )
    
        @ASN1Element ( name = "filter-type", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private Long filter_type = null;
                
  
        @ASN1Element ( name = "filter-frequency", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private FLOAT_Type filter_frequency = null;
                
  
        @ASN1Element ( name = "filter-order", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_I16 filter_order = null;
                
  
        
        public Long getFilter_type () {
            return this.filter_type;
        }

        

        public void setFilter_type (Long value) {
            this.filter_type = value;
        }
        
  
        
        public FLOAT_Type getFilter_frequency () {
            return this.filter_frequency;
        }

        

        public void setFilter_frequency (FLOAT_Type value) {
            this.filter_frequency = value;
        }
        
  
        
        public INT_I16 getFilter_order () {
            return this.filter_order;
        }

        

        public void setFilter_order (INT_I16 value) {
            this.filter_order = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Poc_SaFilterEntry.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            