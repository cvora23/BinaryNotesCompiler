
package ieee.poc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "Poc_NomenclatureVersion", isSet = false )
    public class Poc_NomenclatureVersion implements IASN1PreparedElement {
            @ASN1BitString( name = "" )
    
            @ASN1SizeConstraint ( max = 16L )
        
        @ASN1Element ( name = "nom-major-version", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private BitString nom_major_version = null;
                
  
        @ASN1Element ( name = "nom-minor-version", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_U16 nom_minor_version = null;
                
  
        
        public BitString getNom_major_version () {
            return this.nom_major_version;
        }

        

        public void setNom_major_version (BitString value) {
            this.nom_major_version = value;
        }
        
  
        
        public INT_U16 getNom_minor_version () {
            return this.nom_minor_version;
        }

        

        public void setNom_minor_version (INT_U16 value) {
            this.nom_minor_version = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Poc_NomenclatureVersion.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            