
package ieee.poc;
//
// This file was generated by the BinaryNotes compiler.
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

import org.bn.*;
import org.bn.annotations.*;
import org.bn.annotations.constraints.*;
import org.bn.coders.*;
import org.bn.types.*;




    @ASN1PreparedElement
    @ASN1Sequence ( name = "Poc_EventLogEntry", isSet = false )
    public class Poc_EventLogEntry implements IASN1PreparedElement {
            
        @ASN1Element ( name = "entry-number", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private INT_U32 entry_number = null;
                
  
        @ASN1Element ( name = "abs-time", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private AbsoluteTime abs_time = null;
                
  @ASN1OctetString( name = "" )
    
        @ASN1Element ( name = "event-entry", isOptional =  false , hasTag =  false  , hasDefaultValue =  false  )
    
	private byte[] event_entry = null;
                
  
        
        public INT_U32 getEntry_number () {
            return this.entry_number;
        }

        

        public void setEntry_number (INT_U32 value) {
            this.entry_number = value;
        }
        
  
        
        public AbsoluteTime getAbs_time () {
            return this.abs_time;
        }

        

        public void setAbs_time (AbsoluteTime value) {
            this.abs_time = value;
        }
        
  
        
        public byte[] getEvent_entry () {
            return this.event_entry;
        }

        

        public void setEvent_entry (byte[] value) {
            this.event_entry = value;
        }
        
  
                    
        
        public void initWithDefaults() {
            
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(Poc_EventLogEntry.class);
        public IASN1PreparedElementData getPreparedData() {
            return preparedData;
        }

            
    }
            